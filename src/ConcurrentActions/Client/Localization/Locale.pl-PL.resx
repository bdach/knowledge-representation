<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccessibilityQuery" xml:space="preserve">
    <value>Kwerenda osiągalności</value>
  </data>
  <data name="AccessibilityQueryScreenTip" xml:space="preserve">
    <value>Określa, czy podany warunek logiczny jest osiągalny poprzez wykonanie pewnego programu ze stanu początkowego.</value>
  </data>
  <data name="Action" xml:space="preserve">
    <value>Akcja</value>
  </data>
  <data name="ActionDomainGroupBox" xml:space="preserve">
    <value>Domena akcji</value>
  </data>
  <data name="ActionDropDown" xml:space="preserve">
    <value>Akcje</value>
  </data>
  <data name="ActionDropDownScreenTip" xml:space="preserve">
    <value>Umożliwia dodanie nowej akcji lub wstawienie istniejącej akcji do zdania domeny akcji lub kwerendy.</value>
  </data>
  <data name="ActionScreenTip" xml:space="preserve">
    <value>Akcja, z którą związane jest dane zdanie.</value>
  </data>
  <data name="AddActionButton" xml:space="preserve">
    <value>Dodaj nową</value>
  </data>
  <data name="AddActionCancelButton" xml:space="preserve">
    <value>Anuluj</value>
  </data>
  <data name="AddActionConfirmButton" xml:space="preserve">
    <value>Dodaj</value>
  </data>
  <data name="AddActionPrompt" xml:space="preserve">
    <value>Wpisz unikalną nazwę akcji</value>
  </data>
  <data name="AddActionStatementDropDown" xml:space="preserve">
    <value>Dodaj zdanie domeny akcji</value>
  </data>
  <data name="AddActionStatementDropDownScreenTip" xml:space="preserve">
    <value>Wstawia zdanie domeny akcji do edytowanego scenariusza.</value>
  </data>
  <data name="AddActionTitle" xml:space="preserve">
    <value> Dodaj nową akcję</value>
  </data>
  <data name="AddCompoundActionButton" xml:space="preserve">
    <value>Dodaj akcję złożoną</value>
  </data>
  <data name="AddCompoundActionButtonScreenTip" xml:space="preserve">
    <value>Wstawia pustą akcję złożoną do wybranego programu.</value>
  </data>
  <data name="AddCompoundActionButtonUnbroken" xml:space="preserve">
    <value>Dodaj akcję złożoną</value>
  </data>
  <data name="AddFluentButton" xml:space="preserve">
    <value>Dodaj nowy</value>
  </data>
  <data name="AddFluentCancelButton" xml:space="preserve">
    <value>Anuluj</value>
  </data>
  <data name="AddFluentConfirmButton" xml:space="preserve">
    <value>Dodaj</value>
  </data>
  <data name="AddFluentPrompt" xml:space="preserve">
    <value>Wpisz unikalną nazwę fluenta</value>
  </data>
  <data name="AddFluentTitle" xml:space="preserve">
    <value> Dodaj nowy fluent</value>
  </data>
  <data name="AddQueryStatementDropDown" xml:space="preserve">
    <value>Dodaj kwerendę</value>
  </data>
  <data name="AddQueryStatementDropDownScreenTip" xml:space="preserve">
    <value>Wstawia kwerendę do edytowanego scenariusza.</value>
  </data>
  <data name="AlternativeButton" xml:space="preserve">
    <value>Alternatywa</value>
  </data>
  <data name="AlternativeButtonScreenTip" xml:space="preserve">
    <value>Wstawia alternatywę do wybranej formuły logicznej.</value>
  </data>
  <data name="CalculateButton" xml:space="preserve">
    <value>Wykonaj obliczenia</value>
  </data>
  <data name="CalculateButtonScreenTip" xml:space="preserve">
    <value>Dokonuje ewaluacji kwerend na podstawie wprowadzonej domeny akcji.</value>
  </data>
  <data name="ChooseLanguage" xml:space="preserve">
    <value>Ustaw język</value>
  </data>
  <data name="ClearButton" xml:space="preserve">
    <value>Wyczyść</value>
  </data>
  <data name="ClearButtonScreenTip" xml:space="preserve">
    <value>Usuwa wszystkie fluenty, akcje, zdania domeny akcji i kwerendy z obecnie edytowanego scenariusza.</value>
  </data>
  <data name="CloseButton" xml:space="preserve">
    <value>Zakończ</value>
  </data>
  <data name="CloseButtonScreenTip" xml:space="preserve">
    <value>Zamyka aplikację.</value>
  </data>
  <data name="ConditionalEffectStatement" xml:space="preserve">
    <value>Warunkowe zdanie efektu</value>
  </data>
  <data name="ConditionalEffectStatementScreenTip" xml:space="preserve">
    <value>Opisuje efekty akcji, które zachodzą pod warunkiem spełnienia pewego warunku wstępnego.</value>
  </data>
  <data name="ConditionalFluentReleaseStatement" xml:space="preserve">
    <value>Warunkowe zdanie uwolnienia fluentu</value>
  </data>
  <data name="ConditionalFluentReleaseStatementScreenTip" xml:space="preserve">
    <value>Opisuje losowe efekty akcji, które zachodzą pod warunkiem spełnienia pewnego warunku wstępnego.</value>
  </data>
  <data name="ConditionalImpossibilityStatement" xml:space="preserve">
    <value>Warunkowe zdanie niemożliwości</value>
  </data>
  <data name="ConditionalImpossibilityStatementScreenTip" xml:space="preserve">
    <value>Zapobiega wykonaniu akcji pod warunkiem spełnienia pewnego warunku wstępnego.</value>
  </data>
  <data name="ConjunctionButton" xml:space="preserve">
    <value>Koniunkcja</value>
  </data>
  <data name="ConjunctionButtonScreenTip" xml:space="preserve">
    <value>Wstawia koniunkcję do wybranej formuły logicznej.</value>
  </data>
  <data name="Constraint" xml:space="preserve">
    <value>Warunek integralności</value>
  </data>
  <data name="ConstraintScreenTip" xml:space="preserve">
    <value>Warunek logiczny, który musi być spełniony w każdym stanie.</value>
  </data>
  <data name="ConstraintStatement" xml:space="preserve">
    <value>Zdanie ograniczenia</value>
  </data>
  <data name="ConstraintStatementScreenTip" xml:space="preserve">
    <value>Zapewnia spełnienie pewnego warunku logicznego we wszystkich możliwych stanach.</value>
  </data>
  <data name="EditTab" xml:space="preserve">
    <value>Edycja</value>
  </data>
  <data name="EffectStatement" xml:space="preserve">
    <value>Zdania efektu</value>
  </data>
  <data name="EquivalenceButton" xml:space="preserve">
    <value>Równoważność</value>
  </data>
  <data name="EquivalenceButtonScreenTip" xml:space="preserve">
    <value>Wstawia równoważność do wybranej formuły logicznej.</value>
  </data>
  <data name="ExecutabilityQuery" xml:space="preserve">
    <value>Kwerendy wykonywalności</value>
  </data>
  <data name="ExistentialExecutabilityQuery" xml:space="preserve">
    <value>Egzystencjalna kwerenda wykonywalności</value>
  </data>
  <data name="ExistentialExecutabilityQueryScreenTip" xml:space="preserve">
    <value>Określa, czy podany program jest kiedykolwiek wykonywalny w całości ze stanu początkowego.</value>
  </data>
  <data name="ExistentialValueQuery" xml:space="preserve">
    <value>Egzystencjalna kwerenda wartości</value>
  </data>
  <data name="ExistentialValueQueryScreenTip" xml:space="preserve">
    <value>Określa, czy po wykonaniu podanego programu kiedykolwiek spełniony jest pewien warunek logiczny.</value>
  </data>
  <data name="ExportButton" xml:space="preserve">
    <value>Eksportuj do pliku</value>
  </data>
  <data name="ExportButtonScreenTip" xml:space="preserve">
    <value>Zapisuje dane obecnie edytowanego scenariusza do pliku.</value>
  </data>
  <data name="FalsityButton" xml:space="preserve">
    <value>Fałsz</value>
  </data>
  <data name="FalsityButtonScreenTip" xml:space="preserve">
    <value>Wstawia stałą fałszu do wybranej formuły logicznej.</value>
  </data>
  <data name="Fluent" xml:space="preserve">
    <value>Fluent</value>
  </data>
  <data name="FluentDropDown" xml:space="preserve">
    <value>Fluenty</value>
  </data>
  <data name="FluentDropDownScreenTip" xml:space="preserve">
    <value>Umożliwia dodanie nowego fluentu lub wstawienie istniejącego fluentu do zdania domeny akcji lub kwerendy.</value>
  </data>
  <data name="FluentReleaseStatement" xml:space="preserve">
    <value>Zdania uwolnienia fluentu</value>
  </data>
  <data name="FluentScreenTip" xml:space="preserve">
    <value>Fluent, na który ma wpływ dane zdanie.</value>
  </data>
  <data name="FluentSpecificationStatement" xml:space="preserve">
    <value>Zdanie specyfikacji fluentu</value>
  </data>
  <data name="FluentSpecificationStatementScreenTip" xml:space="preserve">
    <value>Specyfikuje, że dany fluent nie podlega prawu inercji.</value>
  </data>
  <data name="FormulaGroupBox" xml:space="preserve">
    <value>Edytor formuł</value>
  </data>
  <data name="GeneralExecutabilityQuery" xml:space="preserve">
    <value>Ogólna kwerenda wykonywalności</value>
  </data>
  <data name="GeneralExecutabilityQueryScreenTip" xml:space="preserve">
    <value>Określa, czy podany program jest zawsze wykonywalny w całości ze stanu początkowego.</value>
  </data>
  <data name="GeneralValueQuery" xml:space="preserve">
    <value>Ogólna kwerenda wartości</value>
  </data>
  <data name="GeneralValueQueryScreenTip" xml:space="preserve">
    <value>Określa, czy po wykonaniu podanego programu zawsze spełniony jest pewien warunek logiczny.</value>
  </data>
  <data name="ImplicationButton" xml:space="preserve">
    <value>Implikacja</value>
  </data>
  <data name="ImplicationButtonScreenTip" xml:space="preserve">
    <value>Wstawia implikację do wybranej formuły logicznej.</value>
  </data>
  <data name="ImportButton" xml:space="preserve">
    <value>Importuj z pliku</value>
  </data>
  <data name="ImportButtonScreenTip" xml:space="preserve">
    <value>Wczytuje dane scenariusza z pliku.</value>
  </data>
  <data name="InitialCondition" xml:space="preserve">
    <value>Warunek początkowy</value>
  </data>
  <data name="InitialConditionScreenTip" xml:space="preserve">
    <value>Warunek logiczny, który musi być spełniony w stanie początkowym.</value>
  </data>
  <data name="InitialValueStatement" xml:space="preserve">
    <value>Zdanie wartości początkowej</value>
  </data>
  <data name="InitialValueStatementScreenTip" xml:space="preserve">
    <value>Zapewnia spełnienie pewnego warunku logicznego w stanie początkowym.</value>
  </data>
  <data name="LanguageGroupBox" xml:space="preserve">
    <value>Sygnatura języka</value>
  </data>
  <data name="NegationButton" xml:space="preserve">
    <value>Negacja</value>
  </data>
  <data name="NegationButtonScreenTip" xml:space="preserve">
    <value>Wstawia negację do wybranej formuły logicznej.</value>
  </data>
  <data name="ObservationCondition" xml:space="preserve">
    <value>Warunek oberwacji</value>
  </data>
  <data name="ObservationConditionScreenTip" xml:space="preserve">
    <value>Warunek logiczny, który musi być prawdziwy dla przynajmniej jednege potencjalnego efektu wykonania danej akcji.</value>
  </data>
  <data name="ObservationStatement" xml:space="preserve">
    <value>Zdanie obserwacji</value>
  </data>
  <data name="ObservationStatementScreenTip" xml:space="preserve">
    <value>Określa, że podany warunek logiczny jest spełniony przynajmniej w jednym przypadku po wykonaniu danej akcji.</value>
  </data>
  <data name="OptionsTab" xml:space="preserve">
    <value>Opcje</value>
  </data>
  <data name="Postcondition" xml:space="preserve">
    <value>Warunek końcowy</value>
  </data>
  <data name="PostconditionScreenTip" xml:space="preserve">
    <value>Warunek logiczny określający efekt wykonania akcji.</value>
  </data>
  <data name="Precondition" xml:space="preserve">
    <value>Warunek wstępny</value>
  </data>
  <data name="PreconditionScreenTip" xml:space="preserve">
    <value>Warunek logiczny, który musi być spełniony, aby zdanie miało efekt.</value>
  </data>
  <data name="Program" xml:space="preserve">
    <value>Program</value>
  </data>
  <data name="ProgramScreenTip" xml:space="preserve">
    <value>Sekwencja akcji złożonych, której dotyczy kwerenda.</value>
  </data>
  <data name="QueryClauseGroupBox" xml:space="preserve">
    <value>Kwerendy</value>
  </data>
  <data name="SystemGroupBox" xml:space="preserve">
    <value>System dynamiczny</value>
  </data>
  <data name="Target" xml:space="preserve">
    <value>Cel</value>
  </data>
  <data name="TargetScreenTip" xml:space="preserve">
    <value>Warunek logiczny, który powinien zostać spełniony.</value>
  </data>
  <data name="TruthButton" xml:space="preserve">
    <value>Prawda</value>
  </data>
  <data name="TruthButtonScreenTip" xml:space="preserve">
    <value>Wstawia stałą prawdy do wybranej formuły logicznej.</value>
  </data>
  <data name="UnconditionalEffectStatement" xml:space="preserve">
    <value>Bezwarunkowe zdanie efektu</value>
  </data>
  <data name="UnconditionalEffectStatementScreenTip" xml:space="preserve">
    <value>Opisuje pewne efekty akcji.</value>
  </data>
  <data name="UnconditionalFluentReleaseStatement" xml:space="preserve">
    <value>Bezwarunkowe zdanie uwolnienia fluentu</value>
  </data>
  <data name="UnconditionalFluentReleaseStatementScreenTip" xml:space="preserve">
    <value>Opisuje losowe efekty akcji.</value>
  </data>
  <data name="UnconditionalImpossibilityStatement" xml:space="preserve">
    <value>Bezwarunkowe zdanie niemożliwości</value>
  </data>
  <data name="UnconditionalImpossibilityStatementScreenTip" xml:space="preserve">
    <value>Zapobiega wykonaniu danej akcji.</value>
  </data>
  <data name="ValueCondition" xml:space="preserve">
    <value>Warunek wartości</value>
  </data>
  <data name="ValueConditionScreenTip" xml:space="preserve">
    <value>Warunek logiczny, który musi być spełniony zawsze po wykonaniu danej akcji.</value>
  </data>
  <data name="ValueQuery" xml:space="preserve">
    <value>Kwerendy wartości</value>
  </data>
  <data name="ValueStatement" xml:space="preserve">
    <value>Zdanie wartości</value>
  </data>
  <data name="ValueStatementScreenTip" xml:space="preserve">
    <value>Określa, że podany warunek logiczny jest spełniony zawsze po wykonaniu danej akcji.</value>
  </data>
  <data name="WindowTitle" xml:space="preserve">
    <value> Akcje równoległe</value>
  </data>
</root>