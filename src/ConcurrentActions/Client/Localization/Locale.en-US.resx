<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccessibilityQuery" xml:space="preserve">
    <value>Accessibility Query</value>
  </data>
  <data name="AccessibilityQueryScreenTip" xml:space="preserve">
    <value>Determines whether or not a certain logical formula can be satisfied after executing a certain program from the initial state.</value>
  </data>
  <data name="Action" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="ActionDomainGroupBox" xml:space="preserve">
    <value>Action Domain</value>
  </data>
  <data name="ActionDropDown" xml:space="preserve">
    <value>Actions</value>
  </data>
  <data name="ActionDropDownScreenTip" xml:space="preserve">
    <value>Add a new action to the scenario, or insert an existing one into one of the action domain statements or queries.</value>
  </data>
  <data name="ActionScreenTip" xml:space="preserve">
    <value>The action with which a given statement is associated.</value>
  </data>
  <data name="AddActionButton" xml:space="preserve">
    <value>Add New</value>
  </data>
  <data name="AddActionCancelButton" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="AddActionConfirmButton" xml:space="preserve">
    <value>Confirm</value>
  </data>
  <data name="AddActionPrompt" xml:space="preserve">
    <value>Enter a unique action name</value>
  </data>
  <data name="AddActionStatementDropDown" xml:space="preserve">
    <value>Action Domain Statements</value>
  </data>
  <data name="AddActionStatementDropDownScreenTip" xml:space="preserve">
    <value>Add an action domain statement to the current scenario.</value>
  </data>
  <data name="AddActionTitle" xml:space="preserve">
    <value> Add New Action</value>
  </data>
  <data name="AddCompoundActionButton" xml:space="preserve">
    <value>Add Com- pound Action</value>
  </data>
  <data name="AddCompoundActionButtonScreenTip" xml:space="preserve">
    <value>Insert an empty compound action into the selected program.</value>
  </data>
  <data name="AddCompoundActionButtonUnbroken" xml:space="preserve">
    <value>Add Compound Action</value>
  </data>
  <data name="AddFluentButton" xml:space="preserve">
    <value>Add New</value>
  </data>
  <data name="AddFluentCancelButton" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="AddFluentConfirmButton" xml:space="preserve">
    <value>Confirm</value>
  </data>
  <data name="AddFluentPrompt" xml:space="preserve">
    <value>Enter a unique fluent name</value>
  </data>
  <data name="AddFluentTitle" xml:space="preserve">
    <value> Add New Fluent</value>
  </data>
  <data name="AddQueryStatementDropDown" xml:space="preserve">
    <value>Query Statements</value>
  </data>
  <data name="AddQueryStatementDropDownScreenTip" xml:space="preserve">
    <value>Add a query statement to the current scenario.</value>
  </data>
  <data name="AlternativeButton" xml:space="preserve">
    <value>Alternative</value>
  </data>
  <data name="AlternativeButtonScreenTip" xml:space="preserve">
    <value>Insert an alternative into the selected logical formula.</value>
  </data>
  <data name="CalculateButton" xml:space="preserve">
    <value>Perform Calculations</value>
  </data>
  <data name="CalculateButtonScreenTip" xml:space="preserve">
    <value>Evaluate the queries within the action domain entered.</value>
  </data>
  <data name="CannotAddFormulaError" xml:space="preserve">
    <value>The selected element does not support inserting formulae</value>
  </data>
  <data name="ChooseLanguage" xml:space="preserve">
    <value>Choose Language</value>
  </data>
  <data name="ClearButton" xml:space="preserve">
    <value>Clear</value>
  </data>
  <data name="ClearButtonScreenTip" xml:space="preserve">
    <value>Remove all fluents, actions, action domain statements and queries from the curerntly edited scenario.</value>
  </data>
  <data name="CloseButton" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="CloseButtonScreenTip" xml:space="preserve">
    <value>Closes the application.</value>
  </data>
  <data name="ConditionalEffectStatement" xml:space="preserve">
    <value>Conditional Effect Statement</value>
  </data>
  <data name="ConditionalEffectStatementScreenTip" xml:space="preserve">
    <value>Describes the effects of an action, which take place if and only if a certain precondition is met.</value>
  </data>
  <data name="ConditionalFluentReleaseStatement" xml:space="preserve">
    <value>Conditional Fluent Release Statement</value>
  </data>
  <data name="ConditionalFluentReleaseStatementScreenTip" xml:space="preserve">
    <value>Describes nondeterministic effects of an action, which take place if and only if a certain precondition is met.</value>
  </data>
  <data name="ConditionalImpossibilityStatement" xml:space="preserve">
    <value>Conditional Impossibility Statement</value>
  </data>
  <data name="ConditionalImpossibilityStatementScreenTip" xml:space="preserve">
    <value>Prevents the execution of the associated action, as long as a certain precondition is met.</value>
  </data>
  <data name="ConjunctionButton" xml:space="preserve">
    <value>Conjunction</value>
  </data>
  <data name="ConjunctionButtonScreenTip" xml:space="preserve">
    <value>Insert a conjunction into the selected logical formula.</value>
  </data>
  <data name="Constraint" xml:space="preserve">
    <value>Constraint</value>
  </data>
  <data name="ConstraintScreenTip" xml:space="preserve">
    <value>The logical condition which should be satisfied in all states.</value>
  </data>
  <data name="ConstraintStatement" xml:space="preserve">
    <value>Constraint Statement</value>
  </data>
  <data name="ConstraintStatementScreenTip" xml:space="preserve">
    <value>Ensures that a certain condition is satisfied in all possible states.</value>
  </data>
  <data name="EditTab" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="EffectStatement" xml:space="preserve">
    <value>Effect Statements</value>
  </data>
  <data name="EquivalenceButton" xml:space="preserve">
    <value>Equivalence</value>
  </data>
  <data name="EquivalenceButtonScreenTip" xml:space="preserve">
    <value>Insert an equivalence clause into the selected logical formula.</value>
  </data>
  <data name="ErrorMessageItem" xml:space="preserve">
    <value>Tips</value>
  </data>
  <data name="ExecutabilityQuery" xml:space="preserve">
    <value>Executability Queries</value>
  </data>
  <data name="ExistentialExecutabilityQuery" xml:space="preserve">
    <value>Existential Executability Query</value>
  </data>
  <data name="ExistentialExecutabilityQueryScreenTip" xml:space="preserve">
    <value>Determines whether or not a certain program is ever executable in full from the initial state.</value>
  </data>
  <data name="ExistentialValueQuery" xml:space="preserve">
    <value>Existential Value Query</value>
  </data>
  <data name="ExistentialValueQueryScreenTip" xml:space="preserve">
    <value>Determines whether or not a certain logical formula can ever be satisfied after executing a certain program from the initial state.</value>
  </data>
  <data name="ExportButton" xml:space="preserve">
    <value>Export to file</value>
  </data>
  <data name="ExportButtonScreenTip" xml:space="preserve">
    <value>Save the data of the currently edited scenario to a file.</value>
  </data>
  <data name="FalsityButton" xml:space="preserve">
    <value>Falsity</value>
  </data>
  <data name="FalsityButtonScreenTip" xml:space="preserve">
    <value>Insert a falsity constant into the selected logical formula.</value>
  </data>
  <data name="Fluent" xml:space="preserve">
    <value>Fluent</value>
  </data>
  <data name="FluentDropDown" xml:space="preserve">
    <value>Fluents</value>
  </data>
  <data name="FluentDropDownScreenTip" xml:space="preserve">
    <value>Add a new fluent to the scenario, or insert an existing one into one of the action domain statements or queries.</value>
  </data>
  <data name="FluentReleaseStatement" xml:space="preserve">
    <value>Fluent Release Statements</value>
  </data>
  <data name="FluentScreenTip" xml:space="preserve">
    <value>The fluent whose value is affected by the given statement.</value>
  </data>
  <data name="FluentSpecificationStatement" xml:space="preserve">
    <value>Fluent Specification Statement</value>
  </data>
  <data name="FluentSpecificationStatementScreenTip" xml:space="preserve">
    <value>Specifies that the associated fluent does not obey the law of inertia.</value>
  </data>
  <data name="FormulaGroupBox" xml:space="preserve">
    <value>Formula Editor</value>
  </data>
  <data name="GeneralExecutabilityQuery" xml:space="preserve">
    <value>General Executability Query</value>
  </data>
  <data name="GeneralExecutabilityQueryScreenTip" xml:space="preserve">
    <value>Determines whether or not a certain program is always executable in full from the initial state.</value>
  </data>
  <data name="GeneralValueQuery" xml:space="preserve">
    <value>General Value Query</value>
  </data>
  <data name="GeneralValueQueryScreenTip" xml:space="preserve">
    <value>Determines whether or not a certain logical formula is always satisfied after executing a certain pogram from the initial state.</value>
  </data>
  <data name="GrammarTab" xml:space="preserve">
    <value>Grammar</value>
  </data>
  <data name="ImplicationButton" xml:space="preserve">
    <value>Implication</value>
  </data>
  <data name="ImplicationButtonScreenTip" xml:space="preserve">
    <value>Insert an implication into the selected logical formula.</value>
  </data>
  <data name="ImportButton" xml:space="preserve">
    <value>Import from file</value>
  </data>
  <data name="ImportButtonScreenTip" xml:space="preserve">
    <value>Load scenario data from a file.</value>
  </data>
  <data name="InitialCondition" xml:space="preserve">
    <value>Initial Condition</value>
  </data>
  <data name="InitialConditionScreenTip" xml:space="preserve">
    <value>The logical condition which should be satisfied in the initial state.</value>
  </data>
  <data name="InitialValueStatement" xml:space="preserve">
    <value>Initial Value Statement</value>
  </data>
  <data name="InitialValueStatementScreenTip" xml:space="preserve">
    <value>Ensures that a certain condition is satisfied in the initial state.</value>
  </data>
  <data name="LanguageGroupBox" xml:space="preserve">
    <value>Language Signature</value>
  </data>
  <data name="NegationButton" xml:space="preserve">
    <value>Negation</value>
  </data>
  <data name="NegationButtonScreenTip" xml:space="preserve">
    <value>Insert a negation into the selected logical formula.</value>
  </data>
  <data name="ObservationCondition" xml:space="preserve">
    <value>Observation Condition</value>
  </data>
  <data name="ObservationConditionScreenTip" xml:space="preserve">
    <value>The condition which should be satisfied at least in one case after performing the action.</value>
  </data>
  <data name="ObservationStatement" xml:space="preserve">
    <value>Observation Statement</value>
  </data>
  <data name="ObservationStatementScreenTip" xml:space="preserve">
    <value>Specifies that the given condition should be satisfied at least in one case after performing the associated action.</value>
  </data>
  <data name="OptionsTab" xml:space="preserve">
    <value>Options</value>
  </data>
  <data name="Postcondition" xml:space="preserve">
    <value>Postcondition</value>
  </data>
  <data name="PostconditionScreenTip" xml:space="preserve">
    <value>The logical formula which describes the effect of the action.</value>
  </data>
  <data name="Precondition" xml:space="preserve">
    <value>Precondition</value>
  </data>
  <data name="PreconditionScreenTip" xml:space="preserve">
    <value>The logical formula which must be true for the statement to have any effect.</value>
  </data>
  <data name="Program" xml:space="preserve">
    <value>Program</value>
  </data>
  <data name="ProgramScreenTip" xml:space="preserve">
    <value>The sequence of compound actions which is the subject of the query.</value>
  </data>
  <data name="QueryClauseGroupBox" xml:space="preserve">
    <value>Queries</value>
  </data>
  <data name="SystemGroupBox" xml:space="preserve">
    <value>Dynamic System</value>
  </data>
  <data name="Target" xml:space="preserve">
    <value>Target</value>
  </data>
  <data name="TargetScreenTip" xml:space="preserve">
    <value>The target logical condition which should be satisfied.</value>
  </data>
  <data name="TruthButton" xml:space="preserve">
    <value>Truth</value>
  </data>
  <data name="TruthButtonScreenTip" xml:space="preserve">
    <value>Insert a truth constant into the selected logical formula.</value>
  </data>
  <data name="UnconditionalEffectStatement" xml:space="preserve">
    <value>Unconditional Effect Statement</value>
  </data>
  <data name="UnconditionalEffectStatementScreenTip" xml:space="preserve">
    <value>Describes the certain effects of an action.</value>
  </data>
  <data name="UnconditionalFluentReleaseStatement" xml:space="preserve">
    <value>Unconditional Fluent Release Statement</value>
  </data>
  <data name="UnconditionalFluentReleaseStatementScreenTip" xml:space="preserve">
    <value>Describes nondeterministic effects of an action.</value>
  </data>
  <data name="UnconditionalImpossibilityStatement" xml:space="preserve">
    <value>Unconditional Impossibility Statement</value>
  </data>
  <data name="UnconditionalImpossibilityStatementScreenTip" xml:space="preserve">
    <value>Prevents the execution of the associated action.</value>
  </data>
  <data name="ValueCondition" xml:space="preserve">
    <value>Value Condition</value>
  </data>
  <data name="ValueConditionScreenTip" xml:space="preserve">
    <value>The condition which should always be satisfied after performing the action.</value>
  </data>
  <data name="ValueQuery" xml:space="preserve">
    <value>Value Queries</value>
  </data>
  <data name="ValueStatement" xml:space="preserve">
    <value>Value Statement</value>
  </data>
  <data name="ValueStatementScreenTip" xml:space="preserve">
    <value>Specified that the given condition should always be satisfied after performing the associated action.</value>
  </data>
  <data name="WindowTitle" xml:space="preserve">
    <value> Concurrent Actions</value>
  </data>
</root>